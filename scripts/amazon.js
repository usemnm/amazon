/*4.3 first export I'm going to go to the cart.js file to choose which variables can be accessed out of it this file for example we want to access the variable cart outside of this file to do this  in front of the variable type the word export and space and save now this variable can be used outside of cart.js the last step is important we're going to go to the place where we are going to go to use this variable which is inside amazon.js at the top I'm going to tell the computer which variable we want to get from another file so we will type import  { } between this bracket I'm going to give the name of the variable we want to get which is the cart variable and then I'm going to tell the computer which file we want to get this variable from so  type from '  ';  inside this '  ' we're going to locate the file using a file path .. represents folder out of this current folder JavaScript Amazon Project type a / go outside of the folder we are outside of this folder we're going to go into the data folder we're going to type data/ to go into this folder I'm going to locate it at the file cart.js*/
import {cart,addToCart  } from '../data/cart.js';
import { products,loadProducts} from '../data/products.js';
import {formatCurrency}from'./utlis/money.js';

/*19.1.2 use loadproduct function which generated by backend */

loadProducts(renderProductsGrid) ;

/*19.1.3 loadproduct function is a synchronous function it haven't loaded yet so the rest of the Amazon.js code cannot use load product when it is loading so we put the rest of Amazon.js code into a function renderProductsGrid put it into loadproduct function we pass renderProductsGrid has a parameter into load products*/


/*import has another syntax
 import * as cartModule from '../data/cart.js';
 cartModule.cart
 cartModule.addToCart('id');
Imports everything from a file and the group said together inside the subject and then we can access each input as a property or a method */

/*import {cart as mycart } from '../data/cart.js';
const cart = [] ;

4.4.1 the benefit of module help us avoiding naming conflict the only time this is name conflict is we impor a cart variable than you name a variable with the same name  second we can avoid this problem as well after the variable name that we import we can type as and then a different name such as mycardt and save this will basically take the import and rename  so this will no longer conflict with this variable name 4.4.2 the second benefit of module is we don't have to worry about order of files */

/*we actually want to do is to keep the variable cart inside because we want to keep all the code that's related to the cart inside this file so in Amazon.js I'm going to delete this code this will cause another problem,the problem is that in the Amazon.js file we are using the variable cart but now because we are not loading cart.js using a script tag the car variable doesn't exist anymore it contains inside the cart.js file we can't access card from outside now we are going to go to learn how to get a variable out of a file or a module*/
// const cart = [];

/*main idea of JavaScript 
1: save the data 
2: generate the HTML 
3: make it Interactive 
data = information information about our products, 
an array represents a list,used an object represent each product because an object lets us group multiple values together inside this array we're going to create an object*/

/*1:a1: create a variable save the data of each  product*/

/*2:b8 we already create a data file for order product and already imported into HTML page so last back to Java page delete this product array */
/*const product = [{
  image: 'images/products/athletic-cotton-socks-6-pairs.jpg',
  name: 'Black and Gray Athletic Cotton Socks - 6 Pairs',
  rating: {
    starts: 4.5,
    count: 87
  },
  1:a2 JavaScript have problem with calculating for this reason we're going to save the price as cents
  priceCents: 1090,
},{
    image: 'images/products/intermediate-composite-basketball.jpg',
  name: 'Intermediate Size Basketball',
  rating: {
    starts: 4.0,
    count: 127
  },
   1:a3 JavaScript have problem with calculating for this reason we're going to save the price as cents
  priceCents: 2095,
},{
  image: 'images/products/athletic-cotton-socks-6-pairs.jpg',
  name: 'Black and Gray Athletic Cotton Socks - 6 Pairs',
  rating: {
    starts: 4.5,
    count: 87
  },
  priceCents: 1090,
},{
    image: 'images/products/adults-plain-cotton-tshirt-2-pack-teal.jpg',
  name: 'Adults Plain Cotton T-Shirt - 2 Pack',
  rating: {
    starts: 4.5,
    count: 56
  },
  priceCents: 799,
}]*/

/*2:b1 for the main idea of JavaScript Step 2 generate the HTML we're going to create a loop to loop through the data array  of the  product*/

/*2:b4 we're going to combine this HTML into one string and put it on the website , create an accumulator productsHTMl variable and keep it empty string*/
function renderProductsGrid () {

let productsHTMl = '';


products.forEach((product) =>{


/*2:b2 for each of the product we want to generate some HTML so inside of the function let's create a variable,inside of the variable HTML use  ` `copy all of the products for one of these products*/

/*2:b3 we don't want the HTML variable generate the same name and the same values HTML so how do we generate HTML slightly,we're going to use the forEach Loop parameter product = product= [] to change the HTML each value of product insert insert value use ${}*/
/*2:b5 we're going to use this accumulator variable to accumulating HTML generated by forEach Loop ,instead of creating new variable we just make this accumulator variable replace the variable html be created before which contains HTML*/
productsHTMl = productsHTMl + `
    <div class="product-container">
    <div class="product-image-container">
      <img class="product-image"
        src="${product.image}">
    </div>

    <div class="product-name limit-text-to-2-lines">
      ${product.name}
    </div>

    <div class="product-rating-container">
      <img class="product-rating-stars"
        src="${product.getStarsUrl()}">
      <div class="product-rating-count link-primary">
        ${product.rating.count}
      </div>
    </div>

    <div class="product-price">
    ${product.getPrice()}
    </div>

    <div class="product-quantity-container">
      <select>
        <option selected value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
        <option value="6">6</option>
        <option value="7">7</option>
        <option value="8">8</option>
        <option value="9">9</option>
        <option value="10">10</option>
      </select>
    </div>
      
    ${product.extraInfoHTML()}

    <div class="product-spacer"></div>

    <div class="added-to-cart">
      <img src="images/icons/checkmark.png">
      Added
    </div>

    <button class="add-to-cart-button button-primary js-add-to-cart" data-product-id="${product.id}">
      Add to Cart
    </button>
    </div>
    `
})

// 17.2.12 ${product.extraInfoHTML()} is called polymorphism ,polymorphism is a sort of like an alternative to doif statement here instead of doing it it's clothing to us if it's a regular product to this we can just have both of the classes used to the same method and then the class itself will determine what this method does if we add a new class like an  Appliance class we don't need to change this code Appliance class will determine what extra info HTML does
// console.log(productsHTMl);

/*2:b6 display all the HTML on the web page by typing document.querySelector('.js-product-grid').
 innerHTML = productsHTMl accumulator variable*/
document.querySelector('.js-product-grid').
 innerHTML = productsHTMl

 /*2:b7 use the number method .toFixed to fix the number display problem toFixed(2) will convert the number to a string tell it how many decimal numbers we want in the brackets*/

 /*3:c1 we're going to make this add to cart button to be reactive */
 /*3:c2 we  give this button a class and the use Queryselector in order to choose it and use addeventlistener to make it to be reactive querySelectorAll will select all of the buttons and make it in one list a list is an array we're going to use forEach Loop to loop through all the button array and give   addeventlistener make it to be reactive*/
//  console.log(document.querySelectorAll('.js-add-to-cart'))



function updateCartQuantity() {
       /*3:c11 make the addtocart button interactive with the cart number step 1 calculate the quantity 2 put that quantity on the page */

    /*3:c12 after the quantity updating create a accumulate variable then use for Loop to look through the cut array*/
    let cartQuantity = 0;
    cart.forEach((cartitem) => {
      cartQuantity = cartQuantity + cartitem.quantity;

    });
    /*3:c13 go to the HTML page give the cart element a class back to  JavaScript use Queryselector get this element and inner HTML put it in the page */
    document.querySelector('.js-cart-quantity').innerHTML = cartQuantity;
    //console.log(cart);
   /* cart.push({
     productName: productName,
     quantity: 1
    })
    console.log(cart);
    3:c4 however there is a problem when we add the same product you to separate display we want the same product display in one line just change the quantity */
};

 document.querySelectorAll('.js-add-to-cart').forEach((button) =>{
  button.addEventListener('click',() =>{
   /* console.log('add product')*/
   /* 3:c3 ad the cart push(
    {
      product: 'basket',
      quantity:1}
    }
    )
    how do we know which product we are supposed to add to the cart to solve this problem we're going to learn the future HTML call the data attribute a data attribute is just another HTML attribute except the purpose of a data attribute is that it allows us to attach any information to HTML element,Syntax for a data attribute is just an HTML attribute it has a name and a value data attribute have to start with data - then we can give it any name that we want we have to make sure to separate the words with - this is also known as kababa case so the purpose of the data attribute is that we can attach any information to an element here we are attached the product name we can also attach picture or price and so on ,so now we attached the name to this button when we collect this button we can actually get the name and this is which product we should add to the cart ,so the dataset property basically give us all the data attribute that are attached to this button
    for eg     
    <button class="add-to-cart-button button-primary js-add-to-cart" data-product-name="${products.name}">
      Add to Cart
    </button>*/

    /*console.log(button.dataset.productName);*/
     /* 3:c3 no we get  products name we create a variable to save the product name and push it into the cart.js file const cart = []; variable cart,let's push it into a object because we said we want a product and a quantity */
     const productId = button.dataset.productId;

     /* 3:c7 let's save the matching item in a variable outside of the four inch Loop outside of the loop scope we can use it later let's keep matchingitem undefined ,if we find the item product name we can save it in this matchingitem*/
     addToCart(productId);
     updateCartQuantity(); 
  });

 });
}
 /* 3:c2 let's figure out what is add to cart looks like if we think about a cart is basically just  a list and the inside this list we have the product that we want to buy and the quantity or the number of the product that we want to buy so actually we can represent this in JavaScript as an array inside the array we can have some objects and each objects is going to contain the product and  quantity so we can use something like this represent our cart,create a exclusive cart.js file and imported into HTML page
 const cart = [
  {
  product: 'basket',
  quantity:1
  },{
  product: 'shirt',
  quantity:2
  }
  ]
 */
