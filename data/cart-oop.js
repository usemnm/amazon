//17.6 object oriented programming the name in convention is used Pascalcase for things that create or generate objects Pascalcase we start every word with capital including the first word


function Cart(localStorageKey) {
  const cart ={
    //17.1  object oriented programming means organizing our code into object in an object why we use object oriented programming 1 it is easy to create multiple objects cannot have export and let we converted into property and the value
   cartItems:  undefined,
    //17.2 move a function into object use regular function do not use  Arrow function,loadFromStorage() {} is a shorthand for loadFromStorage: function(){}

    //17.7 for fixing every object be generated by this way loading the same localstorag.getItem so give this function a parameter
   loadFromStorage(localStorageKey) {
  
    //17.3 if we change the name of the object this will no longer work to solve this problem JavaScript have a future called this this give us the object that contains this function this is the out of object name
    //17.4 this cart loading from local storage our original cart also loading from local storage so let's change this cart,don't affect our original cart
    this.cartItems =  JSON.parse(localStorage.getItem(localStorageKey));
  
  
  if (!this.cartItems) {
    this.cartItems = [
      {
        productId:"e43638ce-6aa0-4b85-b27f-e1d07eb678c6",
        quantity: 2,
        deliveryOptionId: '1'
        },
  
      {
        productId: "15b6fc6f-327a-4ec4-896f-486349e85a3d",
        quantity: 1,
        deliveryOptionId: '2'
      }
      ]
      }
    },
  
   saveToStorage(){
  
    localStorage.setItem(localStorageKey, JSON.stringify(this.cartItems));
    },
  
     addToCart(productId) {
      let matchingItem;
    
      this.cartItems.forEach((item) =>{
       if(productId === item.productId) {
       };
      })
      
      if(matchingItem){
       matchingItem.quantity += 1;
      }else {
        this.cartItems.push({
         productId: productId,
         quantity: 1,
    
         deliveryOptionId: '1'
        });
      }
     
     this.saveToStorage();
    },
  
   removeFromCart(productId) {
      const newCart = [];
      this.cartItems.forEach((cartItem) => {
        if (cartItem.productId !==productId)
      
        newCart.push(cartItem);
      });
      
      this.cartItems = newCart
      
      this.saveToStorage();
      },
  
   updateDeliveryOption(productId,deliveryOptionId) {
  
        let matchingItem;
        this.cartItems.forEach((item) =>{
         if(productId === item.productId) {
           matchingItem = item;
         };
        })
      
        matchingItem.deliveryOptionId = deliveryOptionId;
        this.saveToStorage();
       }
  };
  //17.7 return  object so we can use it outside the function
  return cart;
}

const cart = Cart('cart-oop');
const businessCart = Cart('cart-business');



//17.3 this function already inside of the object for accessing this function 

cart.loadFromStorage();


//17.3 this function already inside of the object for accessing this function 

businessCart.loadFromStorage();

console.log(cart);
console.log(businessCart);
//17.5 add to cart with save the inside this car object so to access it, takes one parameter is the string which protect ID that we want to add cart.addToCart('83d4ca15-0f35-48f5-b7a3-1ea210004f2e')



//17.4 object oriented programming tries to represent the real world in real world cart is a physical object so object oriented programming represent this physical object as a digital object in this case a JavaScript object a physical cart can have physical product inside our JavaScript object can also have products inside a physical cart also has actions we can take to modify the cart like we can addToCart or removeFromCart JavaScript object also has actions you can take to modify the cart like the addToCart function or removeFromCart function so as you can see object oriented programming tries to represent the real world some people think this makes the code more intuitive


 

 







